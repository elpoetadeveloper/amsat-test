var PLib = { deg2rad: 0.0174532925199433, pi: 3.14159265358979, pio2: 1.5707963267949, twopi: 6.28318530717959, e6a: 1e-06, tothrd: 0.666666666666667, xj3: -2.53881e-06, xke: 0.0743669161, xkmper: 6378.137, xmnpda: 1440, ae: 1, ck2: 0.0005413079, ck4: 6.209887e-07, f: 0.00335281066474748, s: 1.012229, qoms2t: 1.880279e-09, secday: 86400, omega_E: 1.00273790934, zns: 1.19459e-05, c1ss: 2.9864797e-06, zes: 0.01675, znl: 0.00015835218, c1l: 4.7968065e-07, zel: 0.0549, zcosis: 0.91744867, zsinis: 0.39785416, zsings: -0.98088458, zcosgs: 0.1945905, q22: 1.7891679e-06, q31: 2.1460748e-06, q33: 2.2123015e-07, g22: 5.7686396, g32: 0.95240898, g44: 1.8014998, g52: 1.050833, g54: 4.4108898, root22: 1.7891679e-06, root32: 3.7393792e-07, root44: 7.3636953e-09, root52: 1.1428639e-07, root54: 2.1765803e-09, thdt: 0.0043752691, mfactor: 7.292115e-05, sr: 696000, AU: 149597870.691, dpinit: 1, dpsec: 2, dpper: 3, ALL_FLAGS: -1, SGP4_INITIALIZED_FLAG: 4, SDP4_INITIALIZED_FLAG: 2, SIMPLE_FLAG: 32, DEEP_SPACE_EPHEM_FLAG: 64, LUNAR_TERMS_DONE_FLAG: 128, DO_LOOP_FLAG: 512, RESONANCE_FLAG: 1024, SYNCHRONOUS_FLAG: 2048, EPOCH_RESTART_FLAG: 4096, VISIBLE_FLAG: 8192, SAT_ECLIPSED_FLAG: 16384, sat_t: function () { this.line1 = ""; this.line2 = ""; this.name = ""; this.catnum = 0; this.setnum = 0; this.designator = ""; this.year = 0; this.refepoch = 0; this.incl = 0; this.raan = 0; this.eccn = 0; this.argper = 0; this.meanan = 0; this.meanmo = 0; this.drag = 0; this.nddot6 = 0; this.bstar = 0; this.orbitnum = 0; this.refepoch = 0 }, sat: new Array(), qth: { callsign: "HOME", stnlat: 0, stnlong: 0, stnalt: 1000, utc_offset: new Date().getTimezoneOffset() / 60 }, tempstr: "", output: "", tsince: 0, jul_epoch: 0, jul_utc: 0, eclipse_depth: 0, sat_azi: 0, sat_ele: 0, sat_range: 0, sat_range_rate: 0, sat_lat: 0, sat_lon: 0, sat_alt: 0, sat_vel: 0, phase: 0, sun_azi: 0, sun_ele: 0, daynum: 0, fm: 0, fk: 0, age: 0, aostime: 0, lostime: 0, ax: 0, ay: 0, az: 0, rx: 0, ry: 0, rz: 0, squint: 0, alat: 0, alon: 0, ephem: "", sat_sun_status: "", findsun: "", indx: 0, iaz: 0, iel: 0, ma256: 0, isplat: 0, isplong: 0, Flags: 0, rv: 0, irk: 0, tle_t: function () { this.epoch = 0; this.xndt2o = 0; this.xndd6o = 0; this.bstar = 0; this.xincl = 0; this.xnodeo = 0; this.eo = 0; this.omegao = 0; this.xmo = 0; this.xno = 0; this.catnr = 0; this.elset = 0; this.revnum = 0; this.sat_name = ""; this.idesg = "" }, geodetic_t: function () { this.lat = 0; this.lon = 0; this.alt = 0; this.theta = 0 }, vector_t: function () { this.x = 0; this.y = 0; this.z = 0; this.w = 0 }, deep_arg_t: function () { this.eosq = 0; this.sinio = 0; this.cosio = 0; this.betao = 0; this.aodp = 0; this.theta2 = 0; this.sing = 0; this.cosg = 0; this.betao2 = 0; this.xmdot = 0; this.omgdot = 0; this.xnodot = 0; this.xnodp = 0; this.xll = 0; this.omgadf = 0; this.xnode = 0; this.em = 0; this.xinc = 0; this.xn = 0; this.t = 0; this.ds50 = 0 }, obs_geodetic: new Object(), tle: new Object(), tleData: new Array(), isFlagSet: function (a) { return (PLib.Flags & a) }, isFlagClear: function (a) { return (~PLib.Flags & a) }, SetFlag: function (a) { PLib.Flags |= a }, ClearFlag: function (a) { PLib.Flags &= ~a }, Sqr: function (a) { return (a * a) }, Radians: function (a) { return (a * PLib.deg2rad) }, Degrees: function (a) { return (a / PLib.deg2rad) }, Magnitude: function (a) { a.w = Math.sqrt(PLib.Sqr(a.x) + PLib.Sqr(a.y) + PLib.Sqr(a.z)) }, Vec_Sub: function (a, b, c) { c.x = a.x - b.x; c.y = a.y - b.y; c.z = a.z - b.z; PLib.Magnitude(c) }, Scalar_Multiply: function (a, b, c) { c.x = a * b.x; c.y = a * b.y; c.z = a * b.z; c.w = Math.abs(a) * b.w }, Scale_Vector: function (a, b) { b.x *= a; b.y *= a; b.z *= a; PLib.Magnitude(b) }, Dot: function (a, b) { return (a.x * b.x + a.y * b.y + a.z * b.z) }, Angle: function (a, b) { PLib.Magnitude(a); PLib.Magnitude(b); return (Math.acos(PLib.Dot(a, b) / (a.w * b.w))) }, FMod2p: function (c) { var a = 0; var b = 0; b = c; a = parseInt(b / PLib.twopi); b -= a * PLib.twopi; if (b < 0) { b += PLib.twopi } return b }, Modulus: function (a, b) { return a - (parseInt(a / b)) * b }, Frac: function (a) { return (a - Math.floor(a)) }, Convert_Sat_State: function (a, b) { PLib.Scale_Vector(PLib.xkmper, a); PLib.Scale_Vector(PLib.xkmper * PLib.xmnpda / PLib.secday, b) }, Julian_Date_of_Year: function (e) { var a = 0, b = 0, c = 0; var d = 0; e = e - 1; c = parseInt(e / 100); a = c; c = parseInt(a / 4); b = 2 - a + c; c = parseInt(365.25 * e); c += parseInt(30.6001 * 14); d = c + 1720994.5 + b; return d }, Julian_Date_of_Epoch: function (b) { var c = 0, a = 0; c = parseInt(b * 0.001); a = ((b * 0.001) - c) * 1000; if (c < 57) { c = c + 2000 } else { c = c + 1900 } return (PLib.Julian_Date_of_Year(c) + a) }, Delta_ET: function (b) { var a = 0; a = 26.465 + 0.747622 * (b - 1950) + 1.886913 * Math.sin(PLib.twopi * (b - 1975) / 33); return a }, ThetaG: function (c, b) { var i = 0, a = 0, h = 0, e = 0, g = 0, d = 0, f = 0; i = parseInt(c * 0.001); a = ((c * 0.001) - i) * 1000; if (i < 57) { i += 2000 } else { i += 1900 } h = (a - parseInt(a)); a = parseInt(a); e = PLib.Julian_Date_of_Year(i) + a; g = (e - 2451545) / 36525; d = 24110.54841 + g * (8640184.812866 + g * (0.093104 - g * 6.2e-06)); d = PLib.Modulus(d + PLib.secday * PLib.omega_E * h, PLib.secday); f = twopi * d / PLib.secday; b.ds50 = e - 2433281.5 + h; f = PLib.FMod2p(6.3003880987 * b.ds50 + 1.72944494); return f }, ThetaG_JD: function (b) { var d = 0, c = 0, a = 0; d = PLib.Frac(b + 0.5); b = b - d; c = (b - 2451545) / 36525; a = 24110.54841 + c * (8640184.812866 + c * (0.093104 - c * 6.2e-06)); a = PLib.Modulus(a + PLib.secday * PLib.omega_E * d, PLib.secday); return (PLib.twopi * a / PLib.secday) }, Calculate_Solar_Position: function (n, l) { var h = 0, o = 0, m = 0, g = 0, d = 0, b = 0, a = 0, j = 0, f = 0, i = 0, k = 0, c = 0; h = n - 2415020; o = 1900 + h / 365.25; m = (h + PLib.Delta_ET(o) / PLib.secday) / 36525; g = PLib.Radians(PLib.Modulus(358.47583 + PLib.Modulus(35999.04975 * m, 360) - (0.00015 + 3.3e-06 * m) * PLib.Sqr(m), 360)); d = PLib.Radians(PLib.Modulus(279.69668 + PLib.Modulus(36000.76892 * m, 360) + 0.0003025 * PLib.Sqr(m), 360)); b = 0.01675104 - (4.18e-05 + 1.26e-07 * m) * m; a = PLib.Radians((1.91946 - (0.004789 + 1.4e-05 * m) * m) * Math.sin(g) + (0.020094 - 0.0001 * m) * Math.sin(2 * g) + 0.000293 * Math.sin(3 * g)); j = PLib.Radians(PLib.Modulus(259.18 - 1934.142 * m, 360)); f = PLib.Modulus(d + a - PLib.Radians(0.00569 - 0.00479 * Math.sin(j)), PLib.twopi); i = PLib.Modulus(g + a, PLib.twopi); k = 1.0000002 * (1 - PLib.Sqr(b)) / (1 + b * Math.cos(i)); c = PLib.Radians(23.452294 - (0.0130125 + (1.64e-06 - 5.03e-07 * m) * m) * m + 0.00256 * Math.cos(j)); k = PLib.AU * k; l.x = k * Math.cos(f); l.y = k * Math.sin(f) * Math.cos(c); l.z = k * Math.sin(f) * Math.sin(c); l.w = k }, Sat_Eclipsed: function (c, g) { var f = 0, e = 0, a = 0; var d = new PLib.vector_t(); var b = new PLib.vector_t(); e = Math.asin(PLib.xkmper / c.w); PLib.Vec_Sub(g, c, d); f = Math.asin(PLib.sr / d.w); PLib.Scalar_Multiply(-1, c, b); a = PLib.Angle(g, b); PLib.eclipse_depth = e - f - a; if (e < f) { return 0 } else { if (PLib.eclipse_depth >= 0) { return 1 } else { return 0 } } }, select_ephemeris: function (i) { var b = 0, j = 0, c = 0, d = 0, f = 0, h = 0, a = 0, e = 0, g = 0; i.xnodeo *= PLib.deg2rad; i.omegao *= PLib.deg2rad; i.xmo *= PLib.deg2rad; i.xincl *= PLib.deg2rad; h = PLib.twopi / PLib.xmnpda / PLib.xmnpda; i.xno = i.xno * h * PLib.xmnpda; i.xndt2o *= h; i.xndd6o = i.xndd6o * h / PLib.xmnpda; i.bstar /= PLib.ae; c = (PLib.xke / i.xno); d = PLib.tothrd; a = Math.pow(c, d); g = Math.cos(i.xincl); c = (1 - i.eo * i.eo); h = PLib.ck2 * 1.5 * (g * g * 3 - 1) / Math.pow(c, 1.5); e = h / (a * a); b = a * (1 - e * (PLib.tothrd * 0.5 + e * (e * 1.65432098765432 + 1))); f = h / (b * b); j = i.xno / (f + 1); if (PLib.twopi / PLib.xnodp / PLib.xmnpda >= 0.15625) { PLib.SetFlag(PLib.DEEP_SPACE_EPHEM_FLAG) } else { PLib.ClearFlag(PLib.DEEP_SPACE_EPHEM_FLAG) } }, SGP4: function (aD, aB, V, aK) { var C = 0, al = 0, ac = 0, aL = 0, aM = 0, aN = 0, aH = 0, aI = 0, aJ = 0, aX = 0, aW = 0, A = 0, aj = 0, z = 0, ai = 0, aa = 0, aQ = 0, a1 = 0, aG = 0, ad = 0, x = 0, ag = 0, aF = 0, ak = 0, B = 0, l = 0, ab = 0, Z = 0, Y = 0, U = 0, K = 0, N = 0, I = 0, M = 0, y = 0, aO = 0, aP = 0, ay = 0, ah = 0, t = 0, h = 0, aT = 0, j = 0, aS = 0, g = 0, aY = 0, k = 0, aR = 0, H = 0, b = 0, am = 0, E = 0, G = 0, ax = 0, aw = 0, av = 0, a0 = 0, aE = 0, aV = 0, Q = 0, aZ = 0, R = 0, aU = 0, c = 0, d = 0, f = 0, m = 0, n = 0, o = 0, p = 0, q = 0, v = 0, w = 0, D = 0, F = 0, J = 0, L = 0, O = 0, S = 0, T = 0, W = 0, X = 0, af = 0, an = 0, ao = 0, ap = 0, aq = 0, ar = 0, at = 0, au = 0, az = 0, aA = 0, aC = 0; var P = 0; if (PLib.isFlagClear(PLib.SGP4_INITIALIZED_FLAG)) { PLib.SetFlag(PLib.SGP4_INITIALIZED_FLAG); c = Math.pow(PLib.xke / aB.xno, PLib.tothrd); PLib.SGP4.cosio = Math.cos(aB.xincl); az = PLib.SGP4.cosio * PLib.SGP4.cosio; PLib.SGP4.x3thm1 = 3 * az - 1; L = aB.eo * aB.eo; n = 1 - L; m = Math.sqrt(n); D = 1.5 * PLib.ck2 * PLib.SGP4.x3thm1 / (c * c * m * n); f = c * (1 - D * (0.5 * PLib.tothrd + D * (1 + 134 / 81 * D))); F = 1.5 * PLib.ck2 * PLib.SGP4.x3thm1 / (f * f * m * n); PLib.SGP4.xnodp = aB.xno / (1 + F); PLib.SGP4.aodp = f / (1 - F); if ((PLib.SGP4.aodp * (1 - aB.eo) / PLib.ae) < (220 / PLib.xkmper + PLib.ae)) { PLib.SetFlag(PLib.SIMPLE_FLAG) } else { PLib.ClearFlag(PLib.SIMPLE_FLAG) } af = PLib.s; PLib.qoms24 = PLib.qoms2t; PLib.perigee = (PLib.SGP4.aodp * (1 - aB.eo) - PLib.ae) * PLib.xkmper; if (PLib.perigee < 156) { if (PLib.perigee <= 98) { af = 20 } else { af = PLib.perigee - 78 } PLib.qoms24 = Math.pow((120 - af) * PLib.ae / PLib.xkmper, 4); af = af / PLib.xkmper + PLib.ae } T = 1 / (PLib.SGP4.aodp * PLib.SGP4.aodp * n * n); aC = 1 / (PLib.SGP4.aodp - af); PLib.SGP4.eta = PLib.SGP4.aodp * aB.eo * aC; O = PLib.SGP4.eta * PLib.SGP4.eta; J = aB.eo * PLib.SGP4.eta; W = Math.abs(1 - O); v = X * Math.pow(aC, 4); w = v / Math.pow(W, 3.5); p = w * PLib.SGP4.xnodp * (PLib.SGP4.aodp * (1 + 1.5 * O + J * (4 + O)) + 0.75 * PLib.ck2 * aC / W * PLib.SGP4.x3thm1 * (8 + 3 * O * (8 + O))); PLib.SGP4.c1 = aB.bstar * p; PLib.SGP4.sinio = Math.sin(aB.xincl); d = -PLib.xj3 / PLib.ck2 * Math.pow(PLib.ae, 3); q = v * aC * d * PLib.SGP4.xnodp * PLib.ae * PLib.SGP4.sinio / aB.eo; PLib.SGP4.x1mth2 = 1 - az; PLib.SGP4.c4 = 2 * PLib.SGP4.xnodp * w * PLib.SGP4.aodp * n * (PLib.SGP4.eta * (2 + 0.5 * O) + aB.eo * (0.5 + 2 * O) - 2 * PLib.ck2 * aC / (PLib.SGP4.aodp * W) * (-3 * PLib.SGP4.x3thm1 * (1 - 2 * J + O * (1.5 - 0.5 * J)) + 0.75 * PLib.SGP4.x1mth2 * (2 * O - J * (1 + O)) * Math.cos(2 * aB.omegao))); PLib.SGP4.c5 = 2 * w * PLib.SGP4.aodp * n * (1 + 2.75 * (O + J) + J * O); aA = az * az; ao = 3 * PLib.ck2 * T * PLib.SGP4.xnodp; ap = ao * PLib.ck2 * T; aq = 1.25 * PLib.ck4 * T * T * PLib.SGP4.xnodp; PLib.SGP4.xmdot = PLib.SGP4.xnodp + 0.5 * ao * m * PLib.SGP4.x3thm1 + 0.0625 * ap * m * (13 - 78 * az + 137 * aA); aO = 1 - 5 * az; PLib.SGP4.omgdot = -0.5 * ao * aO + 0.0625 * ap * (7 - 114 * az + 395 * aA) + aq * (3 - 36 * az + 49 * aA); aP = -ao * PLib.SGP4.cosio; PLib.SGP4.xnodot = aP + (0.5 * ap * (4 - 19 * az) + 2 * aq * (3 - 7 * az)) * PLib.SGP4.cosio; PLib.SGP4.omgcof = aB.bstar * q * Math.cos(aB.omegao); PLib.SGP4.xmcof = -PLib.tothrd * v * aB.bstar * PLib.ae / J; PLib.SGP4.xnodcf = 3.5 * n * aP * PLib.SGP4.c1; PLib.SGP4.t2cof = 1.5 * PLib.SGP4.c1; PLib.SGP4.xlcof = 0.125 * d * PLib.SGP4.sinio * (3 + 5 * PLib.SGP4.cosio) / (1 + PLib.SGP4.cosio); PLib.SGP4.aycof = 0.25 * d * PLib.SGP4.sinio; PLib.SGP4.delmo = Math.pow(1 + PLib.SGP4.eta * Math.cos(aB.xmo), 3); PLib.SGP4.sinmo = Math.sin(aB.xmo); PLib.SGP4.x7thm1 = 7 * az - 1; if (PLib.isFlagClear(PLib.SIMPLE_FLAG)) { o = PLib.SGP4.c1 * PLib.SGP4.c1; PLib.SGP4.d2 = 4 * PLib.SGP4.aodp * aC * o; an = PLib.SGP4.d2 * aC * PLib.SGP4.c1 / 3; PLib.SGP4.d3 = (17 * PLib.SGP4.aodp + af) * an; PLib.SGP4.d4 = 0.5 * an * PLib.SGP4.aodp * aC * (221 * PLib.SGP4.aodp + 31 * af) * PLib.SGP4.c1; PLib.SGP4.t3cof = PLib.SGP4.d2 + 2 * o; PLib.SGP4.t4cof = 0.25 * (3 * PLib.SGP4.d3 + PLib.SGP4.c1 * (12 * PLib.SGP4.d2 + 10 * o)); PLib.SGP4.t5cof = 0.2 * (3 * PLib.SGP4.d4 + 12 * PLib.SGP4.c1 * PLib.SGP4.d3 + 6 * PLib.SGP4.d2 * PLib.SGP4.d2 + 15 * o * (2 * PLib.SGP4.d2 + o)) } } aU = aB.xmo + PLib.SGP4.xmdot * aD; R = aB.omegao + PLib.SGP4.omgdot * aD; aZ = aB.xnodeo + PLib.SGP4.xnodot * aD; Q = R; aV = aU; aE = aD * aD; a0 = aZ + PLib.SGP4.xnodcf * aE; av = 1 - PLib.SGP4.c1 * aD; aw = aB.bstar * PLib.SGP4.c4 * aD; ax = PLib.SGP4.t2cof * aE; if (PLib.isFlagClear(PLib.SIMPLE_FLAG)) { G = PLib.SGP4.omgcof * aD; E = PLib.SGP4.xmcof * (Math.pow(1 + PLib.SGP4.eta * Math.cos(aU), 3) - PLib.SGP4.delmo); an = G + E; aV = aU + an; Q = R - an; am = aE * aD; ay = aD * am; av = av - PLib.SGP4.d2 * aE - PLib.SGP4.d3 * am - PLib.SGP4.d4 * ay; aw = aw + aB.bstar * PLib.SGP4.c5 * (Math.sin(aV) - PLib.SGP4.sinmo); ax = ax + PLib.SGP4.t3cof * am + ay * (PLib.SGP4.t4cof + aD * PLib.SGP4.t5cof) } b = PLib.SGP4.aodp * Math.pow(av, 2); H = aB.eo - aw; aR = aV + Q + a0 + PLib.SGP4.xnodp * ax; k = Math.sqrt(1 - H * H); aY = PLib.xke / Math.pow(b, 1.5); g = H * Math.cos(Q); an = 1 / (b * k * k); aS = an * PLib.SGP4.xlcof * g; j = an * PLib.SGP4.aycof; aT = aR + aS; h = H * Math.sin(Q) + j; t = PLib.FMod2p(aT - a0); ap = t; P = 0; do { ah = Math.sin(ap); y = Math.cos(ap); aq = g * ah; ar = h * y; at = g * y; au = h * ah; M = (t - ar + aq - ap) / (1 - at - au) + ap; if (Math.abs(M - ap) <= PLib.e6a) { break } ap = M } while (P++ < 10); I = at + au; N = aq - ar; K = g * g + h * h; an = 1 - K; U = b * an; Y = b * (1 - I); ao = 1 / Y; Z = PLib.xke * Math.sqrt(b) * N * ao; ab = PLib.xke * Math.sqrt(U) * ao; ap = b * ao; l = Math.sqrt(an); aq = 1 / (1 + l); B = ap * (y - g + h * N * aq); ak = ap * (ah - h - g * N * aq); aF = Math.atan2(ak, B); ag = 2 * ak * B; x = 2 * B * B - 1; an = 1 / U; ao = PLib.ck2 * an; ap = ao * an; ad = Y * (1 - 1.5 * ap * l * PLib.SGP4.x3thm1) + 0.5 * ao * PLib.SGP4.x1mth2 * x; aG = aF - 0.25 * ap * PLib.SGP4.x7thm1 * ag; a1 = a0 + 1.5 * ap * PLib.SGP4.cosio * ag; aQ = aB.xincl + 1.5 * ap * PLib.SGP4.cosio * PLib.SGP4.sinio * x; aa = Z - aY * ao * PLib.SGP4.x1mth2 * ag; ac = ab + aY * ao * (PLib.SGP4.x1mth2 * x + 1.5 * PLib.SGP4.x3thm1); al = Math.sin(aG); C = Math.cos(aG); ai = Math.sin(aQ); z = Math.cos(aQ); aj = Math.sin(a1); A = Math.cos(a1); aW = -aj * z; aX = A * z; aH = aW * al + A * C; aI = aX * al + aj * C; aJ = ai * al; aL = aW * C - A * al; aM = aX * C - aj * al; aN = ai * C; V.x = ad * aH; V.y = ad * aI; V.z = ad * aJ; aK.x = aa * aH + ac * aL; aK.y = aa * aI + ac * aM; aK.z = aa * aJ + ac * aN; PLib.phase = aT - a0 - R + PLib.twopi; if (PLib.phase < 0) { PLib.phase += PLib.twopi } PLib.phase = PLib.FMod2p(PLib.phase) }, Deep: function (ai, aM, A) { var a = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, b = 0, l = 0, m = 0, n = 0, aw = 0, aA = 0, aB = 0, aC = 0, ax = 0, ay = 0, az = 0, y = 0, o = 0, x = 0, p = 0, q = 0, r = 0, t = 0, u = 0, v = 0, w = 0, L = 0, bw = 0, bx = 0, z = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, a5 = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, U = 0, V = 0, W = 0, aj = 0, ak = 0, al = 0, am = 0, an = 0, ao = 0, ap = 0, aq = 0, ar = 0, at = 0, au = 0, av = 0, aZ = 0, X = 0, Y = 0, Z = 0, aa = 0, ab = 0, ac = 0, ad = 0, af = 0, ag = 0, ah = 0, aD = 0, aE = 0, aF = 0, aG = 0, aH = 0, aI = 0, aJ = 0, aK = 0, aL = 0, aN = 0, aO = 0, aP = 0, aQ = 0, aR = 0, aS = 0, aT = 0, aU = 0, aV = 0, aW = 0, aX = 0, aY = 0, a0 = 0, a1 = 0, a2 = 0, a3 = 0, a4 = 0, a6 = 0, a7 = 0, a8 = 0, a9 = 0, ba = 0, bb = 0, bc = 0, bd = 0, be = 0, bf = 0, bg = 0, bh = 0, bi = 0, bj = 0, bk = 0, bo = 0, bp = 0, bq = 0, br = 0, bs = 0, bt = 0, bu = 0, bv = 0, bl = 0, bm = 0, bn = 0, B = 0, T = 0; switch (ai) { case dpinit: PLib.Deep.thgr = PLib.ThetaG(aM.epoch, A); E = aM.eo; PLib.Deep.xnq = A.xnodp; n = 1 / A.aodp; PLib.Deep.xqncl = aM.xincl; a0 = aM.xmo; a8 = A.omgdot + A.xnodot; aD = Math.sin(aM.xnodeo); v = Math.cos(aM.xnodeo); PLib.Deep.omegaq = aM.omegao; y = A.ds50 + 18261.5; if (y != PLib.Deep.preep) { PLib.Deep.preep = y; a4 = 4.523602 - 0.00092422029 * y; aJ = Math.sin(a4); w = Math.cos(a4); PLib.Deep.zcosil = 0.91375164 - 0.03568096 * w; PLib.Deep.zsinil = Math.sqrt(1 - PLib.Deep.zcosil * PLib.Deep.zcosil); PLib.Deep.zsinhl = 0.089683511 * aJ / PLib.Deep.zsinil; PLib.Deep.zcoshl = Math.sqrt(1 - PLib.Deep.zsinhl * PLib.Deep.zsinhl); q = 4.7199672 + 0.2299715 * y; ah = 5.8351514 + 0.001944368 * y; PLib.Deep.zmol = PLib.FMod2p(q - ah); bw = 0.39785416 * aJ / PLib.Deep.zsinil; bx = PLib.Deep.zcoshl * w + 0.91744867 * PLib.Deep.zsinhl * aJ; bw = Math.atan2(bw, bx); bw = ah + bw - a4; PLib.Deep.zcosgl = Math.cos(bw); PLib.Deep.zsingl = Math.sin(bw); PLib.Deep.zmos = 6.2565837 + 0.017201977 * y; PLib.Deep.zmos = PLib.FMod2p(PLib.Deep.zmos) } PLib.Deep.savtsn = 1e+20; bl = PLib.zcosgs; bt = PLib.zsings; bn = PLib.zcosis; bv = PLib.zsinis; bm = v; bu = aD; r = PLib.c1ss; bs = PLib.zns; bo = PLib.zes; br = PLib.Deep.zmos; a6 = 1 / PLib.Deep.xnq; for (; ;) { a = bl * bm + bt * bn * bu; e = -bt * bm + bl * bn * bu; i = -bl * bu + bt * bn * bm; j = bt * bv; k = bt * bu + bl * bn * bm; b = bl * bv; d = A.cosio * i + A.sinio * j; f = A.cosio * k + A.sinio * b; g = -A.sinio * i + A.cosio * j; h = -A.sinio * k + A.cosio * b; aN = a * A.cosg + d * A.sing; aO = e * A.cosg + f * A.sing; aR = -a * A.sing + d * A.cosg; aS = -e * A.sing + f * A.cosg; aT = g * A.sing; aU = h * A.sing; aV = g * A.cosg; aW = h * A.cosg; bi = 12 * aN * aN - 3 * aR * aR; bj = 24 * aN * aO - 6 * aR * aS; bk = 12 * aO * aO - 3 * aS * aS; a9 = 3 * (a * a + d * d) + bi * A.eosq; bd = 6 * (a * e + d * f) + bj * A.eosq; bh = 3 * (e * e + f * f) + bk * A.eosq; ba = -6 * a * g + A.eosq * (-24 * aN * aV - 6 * aR * aT); bb = -6 * (a * h + e * g) + A.eosq * (-24 * (aO * aV + aN * aW) - 6 * (aR * aU + aS * aT)); bc = -6 * e * h + A.eosq * (-24 * aO * aW - 6 * aS * aU); be = 6 * d * g + A.eosq * (24 * aN * aT - 6 * aR * aV); bf = 6 * (f * g + d * h) + A.eosq * (24 * (aO * aT + aN * aU) - 6 * (aS * aV + aR * aW)); bg = 6 * f * h + A.eosq * (24 * aO * aU - 6 * aS * aW); a9 = a9 + a9 + A.betao2 * bi; bd = bd + bd + A.betao2 * bj; bh = bh + bh + A.betao2 * bk; an = r * a6; am = -0.5 * an / A.betao; ao = an * A.betao; al = -15 * E * ao; ap = aN * aR + aO * aS; aq = aO * aR + aN * aS; ar = aO * aS - aN * aR; at = al * bs * ap; ay = am * bs * (ba + bc); aG = -bs * an * (a9 + bh - 14 - 6 * A.eosq); aw = ao * bs * (bi + bk - 6); ax = -bs * am * (be + bg); if (PLib.Deep.xqncl < 0.052359877) { ax = 0 } PLib.Deep.ee2 = 2 * al * aq; PLib.Deep.e3 = 2 * al * ar; PLib.Deep.xi2 = 2 * am * bb; PLib.Deep.xi3 = 2 * am * (bc - ba); PLib.Deep.xl2 = -2 * an * bd; PLib.Deep.xl3 = -2 * an * (bh - a9); PLib.Deep.xl4 = -2 * an * (-21 - 9 * A.eosq) * bo; PLib.Deep.xgh2 = 2 * ao * bj; PLib.Deep.xgh3 = 2 * ao * (bk - bi); PLib.Deep.xgh4 = -18 * ao * bo; PLib.Deep.xh2 = -2 * am * bf; PLib.Deep.xh3 = -2 * am * (bg - be); if (PLib.isFlagSet(PLib.LUNAR_TERMS_DONE_FLAG)) { break } PLib.Deep.sse = at; PLib.Deep.ssi = ay; PLib.Deep.ssl = aG; PLib.Deep.ssh = ax / A.sinio; PLib.Deep.ssg = aw - A.cosio * PLib.Deep.ssh; PLib.Deep.se2 = PLib.Deep.ee2; PLib.Deep.si2 = PLib.Deep.xi2; PLib.Deep.sl2 = PLib.Deep.xl2; PLib.Deep.sgh2 = PLib.Deep.xgh2; PLib.Deep.sh2 = PLib.Deep.xh2; PLib.Deep.se3 = PLib.Deep.e3; PLib.Deep.si3 = PLib.Deep.xi3; PLib.Deep.sl3 = PLib.Deep.xl3; PLib.Deep.sgh3 = PLib.Deep.xgh3; PLib.Deep.sh3 = PLib.Deep.xh3; PLib.Deep.sl4 = PLib.Deep.xl4; PLib.Deep.sgh4 = PLib.Deep.xgh4; bl = PLib.Deep.zcosgl; bt = PLib.Deep.zsingl; bn = PLib.Deep.zcosil; bv = PLib.Deep.zsinil; bm = PLib.Deep.zcoshl * v + PLib.Deep.zsinhl * aD; bu = aD * PLib.Deep.zcoshl - v * PLib.Deep.zsinhl; bs = PLib.znl; r = PLib.c1l; bo = PLib.zel; br = PLib.Deep.zmol; PLib.SetFlag(PLib.LUNAR_TERMS_DONE_FLAG) } PLib.Deep.sse = PLib.Deep.sse + at; PLib.Deep.ssi = PLib.Deep.ssi + ay; PLib.Deep.ssl = PLib.Deep.ssl + aG; PLib.Deep.ssg = PLib.Deep.ssg + aw - A.cosio / A.sinio * ax; PLib.Deep.ssh = PLib.Deep.ssh + ax / A.sinio; PLib.ClearFlag(PLib.RESONANCE_FLAG); PLib.ClearFlag(PLib.SYNCHRONOUS_FLAG); if (!((PLib.Deep.xnq < 0.0052359877) && (PLib.Deep.xnq > 0.0034906585))) { if ((PLib.Deep.xnq < 0.00826) || (PLib.Deep.xnq > 0.00924)) { return } if (E < 0.5) { return } PLib.SetFlag(PLib.RESONANCE_FLAG); D = E * A.eosq; V = -0.306 - (E - 0.64) * 0.44; if (E <= 0.65) { W = 3.616 - 13.247 * E + 16.29 * A.eosq; Y = -19.302 + 117.39 * E - 228.419 * A.eosq + 156.591 * D; Z = -18.9068 + 109.7927 * E - 214.6334 * A.eosq + 146.5816 * D; aa = -41.122 + 242.694 * E - 471.094 * A.eosq + 313.953 * D; ab = -146.407 + 841.88 * E - 1629.014 * A.eosq + 1083.435 * D; ac = -532.114 + 3017.977 * E - 5740 * A.eosq + 3708.276 * D } else { W = -72.099 + 331.819 * E - 508.738 * A.eosq + 266.724 * D; Y = -346.844 + 1582.851 * E - 2415.925 * A.eosq + 1246.113 * D; Z = -342.585 + 1554.908 * E - 2366.899 * A.eosq + 1215.972 * D; aa = -1052.797 + 4758.686 * E - 7193.992 * A.eosq + 3651.957 * D; ab = -3581.69 + 16178.11 * E - 24462.77 * A.eosq + 12422.52 * D; if (E <= 0.715) { ac = 1464.74 - 4664.75 * E + 3763.64 * A.eosq } else { ac = -5149.66 + 29936.92 * E - 54087.36 * A.eosq + 31324.56 * D } } if (E < 0.7) { ag = -919.2277 + 4988.61 * E - 9064.77 * A.eosq + 5542.21 * D; ad = -822.71072 + 4568.6173 * E - 8491.4146 * A.eosq + 5337.524 * D; af = -853.666 + 4690.25 * E - 8624.77 * A.eosq + 5341.4 * D } else { ag = -37995.78 + 161616.52 * E - 229838.2 * A.eosq + 109377.94 * D; ad = -51752.104 + 218913.95 * E - 309468.16 * A.eosq + 146349.42 * D; af = -40023.88 + 170470.89 * E - 242699.48 * A.eosq + 115605.82 * D } aA = A.sinio * A.sinio; G = 0.75 * (1 + 2 * A.cosio + A.theta2); H = 1.5 * aA; K = 1.875 * A.sinio * (1 - 2 * A.cosio - 3 * A.theta2); L = -1.875 * A.sinio * (1 + 2 * A.cosio - 3 * A.theta2); N = 35 * aA * G; O = 39.375 * aA * aA; P = 9.84375 * A.sinio * (aA * (1 - 2 * A.cosio - 5 * A.theta2) + 0.33333333 * (-2 + 4 * A.cosio + 6 * A.theta2)); Q = A.sinio * (4.92187512 * aA * (-2 - 4 * A.cosio + 10 * A.theta2) + 6.56250012 * (1 + 2 * A.cosio - 3 * A.theta2)); R = 29.53125 * A.sinio * (2 - 8 * A.cosio + A.theta2 * (-12 + 8 * A.cosio + 10 * A.theta2)); S = 29.53125 * A.sinio * (-2 - 8 * A.cosio + A.theta2 * (12 + 8 * A.cosio - 10 * A.theta2)); a3 = PLib.Deep.xnq * PLib.Deep.xnq; l = n * n; aL = 3 * a3 * l; aK = aL * PLib.root22; PLib.Deep.d2201 = aK * G * V; PLib.Deep.d2211 = aK * H * W; aL = aL * n; aK = aL * PLib.root32; PLib.Deep.d3210 = aK * K * Y; PLib.Deep.d3222 = aK * L * Z; aL = aL * n; aK = 2 * aL * PLib.root44; PLib.Deep.d4410 = aK * N * aa; PLib.Deep.d4422 = aK * O * ab; aL = aL * n; aK = aL * PLib.root52; PLib.Deep.d5220 = aK * P * ac; PLib.Deep.d5232 = aK * Q * af; aK = 2 * aL * PLib.root54; PLib.Deep.d5421 = aK * R * ad; PLib.Deep.d5433 = aK * S * ag; PLib.Deep.xlamo = a0 + aM.xnodeo + aM.xnodeo - PLib.Deep.thgr - PLib.Deep.thgr; p = A.xmdot + A.xnodot + A.xnodot - PLib.thdt - PLib.thdt; p = p + PLib.Deep.ssl + PLib.Deep.ssh + PLib.Deep.ssh } else { PLib.SetFlag(PLib.RESONANCE_FLAG); PLib.SetFlag(PLib.SYNCHRONOUS_FLAG); U = 1 + A.eosq * (-2.5 + 0.8125 * A.eosq); Y = 1 + 2 * A.eosq; X = 1 + A.eosq * (-6 + 6.60937 * A.eosq); G = 0.75 * (1 + A.cosio) * (1 + A.cosio); J = 0.9375 * A.sinio * A.sinio * (1 + 3 * A.cosio) - 0.75 * (1 + A.cosio); M = 1 + A.cosio; M = 1.875 * M * M * M; PLib.Deep.del1 = 3 * PLib.Deep.xnq * PLib.Deep.xnq * n * n; PLib.Deep.del2 = 2 * PLib.Deep.del1 * G * U * q22; PLib.Deep.del3 = 3 * PLib.Deep.del1 * M * X * q33 * n; PLib.Deep.del1 = PLib.Deep.del1 * J * Y * q31 * n; PLib.Deep.fasx2 = 0.13130908; PLib.Deep.fasx4 = 2.8843198; PLib.Deep.fasx6 = 0.37448087; PLib.Deep.xlamo = a0 + aM.xnodeo + aM.omegao - PLib.Deep.thgr; p = A.xmdot + a8 - PLib.thdt; p = p + PLib.Deep.ssl + PLib.Deep.ssg + PLib.Deep.ssh } PLib.Deep.xfact = p - PLib.Deep.xnq; PLib.Deep.xli = PLib.Deep.xlamo; PLib.Deep.xni = PLib.Deep.xnq; PLib.Deep.atime = 0; PLib.Deep.stepp = 720; PLib.Deep.stepn = -720; PLib.Deep.step2 = 259200; return; case dpsec: A.xll = A.xll + PLib.Deep.ssl * A.t; A.omgadf = A.omgadf + PLib.Deep.ssg * A.t; A.xnode = A.xnode + PLib.Deep.ssh * A.t; A.em = aM.eo + PLib.Deep.sse * A.t; A.xinc = aM.xincl + PLib.Deep.ssi * A.t; if (A.xinc < 0) { A.xinc = -A.xinc; A.xnode = A.xnode + pi; A.omgadf = A.omgadf - pi } if (PLib.isFlagClear(PLib.RESONANCE_FLAG)) { return } do { if ((PLib.Deep.atime == 0) || ((A.t >= 0) && (PLib.Deep.atime < 0)) || ((A.t < 0) && (PLib.Deep.atime >= 0))) { if (A.t >= 0) { B = PLib.Deep.stepp } else { B = PLib.Deep.stepn } PLib.Deep.atime = 0; PLib.Deep.xni = PLib.Deep.xnq; PLib.Deep.xli = PLib.Deep.xlamo } else { if (Math.abs(A.t) >= Math.abs(PLib.Deep.atime)) { if (A.t > 0) { B = PLib.Deep.stepp } else { B = PLib.Deep.stepn } } } do { if (Math.abs(A.t - PLib.Deep.atime) >= PLib.Deep.stepp) { PLib.SetFlag(PLib.DO_LOOP_FLAG); PLib.ClearFlag(PLib.EPOCH_RESTART_FLAG) } else { T = A.t - PLib.Deep.atime; PLib.ClearFlag(PLib.DO_LOOP_FLAG) } if (Math.abs(A.t) < Math.abs(PLib.Deep.atime)) { if (A.t >= 0) { B = PLib.Deep.stepn } else { B = PLib.Deep.stepp } PLib.SetFlag(PLib.DO_LOOP_FLAG | PLib.EPOCH_RESTART_FLAG) } if (PLib.isFlagSet(PLib.SYNCHRONOUS_FLAG)) { a2 = PLib.Deep.del1 * Math.sin(PLib.Deep.xli - PLib.Deep.fasx2) + PLib.Deep.del2 * Math.sin(2 * (PLib.Deep.xli - PLib.Deep.fasx4)) + PLib.Deep.del3 * Math.sin(3 * (PLib.Deep.xli - PLib.Deep.fasx6)); a1 = PLib.Deep.del1 * Math.cos(PLib.Deep.xli - PLib.Deep.fasx2) + 2 * PLib.Deep.del2 * Math.cos(2 * (PLib.Deep.xli - PLib.Deep.fasx4)) + 3 * PLib.Deep.del3 * Math.cos(3 * (PLib.Deep.xli - PLib.Deep.fasx6)) } else { a7 = PLib.Deep.omegaq + A.omgdot * PLib.Deep.atime; aQ = a7 + a7; aP = PLib.Deep.xli + PLib.Deep.xli; a2 = PLib.Deep.d2201 * Math.sin(aQ + PLib.Deep.xli - g22) + PLib.Deep.d2211 * Math.sin(PLib.Deep.xli - g22) + PLib.Deep.d3210 * Math.sin(a7 + PLib.Deep.xli - g32) + PLib.Deep.d3222 * Math.sin(-a7 + PLib.Deep.xli - g32) + PLib.Deep.d4410 * sin(aQ + aP - g44) + PLib.Deep.d4422 * sin(aP - g44) + PLib.Deep.d5220 * sin(a7 + PLib.Deep.xli - g52) + PLib.Deep.d5232 * sin(-a7 + PLib.Deep.xli - g52) + PLib.Deep.d5421 * sin(a7 + aP - g54) + PLib.Deep.d5433 * sin(-a7 + aP - g54); a1 = PLib.Deep.d2201 * Math.cos(aQ + PLib.Deep.xli - g22) + PLib.Deep.d2211 * Math.cos(PLib.Deep.xli - g22) + PLib.Deep.d3210 * Math.cos(a7 + PLib.Deep.xli - g32) + PLib.Deep.d3222 * Math.cos(-a7 + PLib.Deep.xli - g32) + PLib.Deep.d5220 * cos(a7 + PLib.Deep.xli - g52) + PLib.Deep.d5232 * cos(-a7 + PLib.Deep.xli - g52) + 2 * (PLib.Deep.d4410 * cos(aQ + aP - g44) + PLib.Deep.d4422 * cos(aP - g44) + PLib.Deep.d5421 * cos(a7 + aP - g54) + PLib.Deep.d5433 * cos(-a7 + aP - g54)) } aY = PLib.Deep.xni + PLib.Deep.xfact; a1 = a1 * aY; if (PLib.isFlagSet(PLib.DO_LOOP_FLAG)) { PLib.Deep.xli = PLib.Deep.xli + aY * B + a2 * PLib.Deep.step2; PLib.Deep.xni = PLib.Deep.xni + a2 * B + a1 * PLib.Deep.step2; PLib.Deep.atime = PLib.Deep.atime + B } } while (PLib.isFlagSet(PLib.DO_LOOP_FLAG) && PLib.isFlagClear(PLib.EPOCH_RESTART_FLAG)) } while (PLib.isFlagSet(PLib.DO_LOOP_FLAG) && PLib.isFlagSet(PLib.EPOCH_RESTART_FLAG)); A.xn = PLib.Deep.xni + a2 * T + a1 * T * T * 0.5; aX = PLib.Deep.xli + aY * T + a2 * T * T * 0.5; aK = -A.xnode + PLib.Deep.thgr + A.t * PLib.thdt; if (PLib.isFlagClear(PLib.SYNCHRONOUS_FLAG)) { A.xll = aX + aK + aK } else { A.xll = aX - A.omgadf + aK } return; case dpper: aB = Math.sin(A.xinc); t = Math.cos(A.xinc); if (Math.abs(PLib.Deep.savtsn - A.t) >= 30) { PLib.Deep.savtsn = A.t; bq = PLib.Deep.zmos + PLib.zns * A.t; bp = bq + 2 * PLib.zes * Math.sin(bq); aE = Math.sin(bp); F = 0.5 * aE * aE - 0.25; I = -0.5 * aE * Math.cos(bp); av = PLib.Deep.se2 * F + PLib.Deep.se3 * I; aF = PLib.Deep.si2 * F + PLib.Deep.si3 * I; aI = PLib.Deep.sl2 * F + PLib.Deep.sl3 * I + PLib.Deep.sl4 * aE; PLib.Deep.sghs = PLib.Deep.sgh2 * F + PLib.Deep.sgh3 * I + PLib.Deep.sgh4 * aE; PLib.Deep.shs = PLib.Deep.sh2 * F + PLib.Deep.sh3 * I; bq = PLib.Deep.zmol + PLib.znl * A.t; bp = bq + 2 * zel * Math.sin(bq); aE = Math.sin(bp); F = 0.5 * aE * aE - 0.25; I = -0.5 * aE * Math.cos(bp); au = PLib.Deep.ee2 * F + PLib.Deep.e3 * I; az = PLib.Deep.xi2 * F + PLib.Deep.xi3 * I; aH = PLib.Deep.xl2 * F + PLib.Deep.xl3 * I + PLib.Deep.xl4 * aE; PLib.Deep.sghl = PLib.Deep.xgh2 * F + PLib.Deep.xgh3 * I + PLib.Deep.xgh4 * aE; PLib.Deep.sh1 = PLib.Deep.xh2 * F + PLib.Deep.xh3 * I; PLib.Deep.pe = av + au; PLib.Deep.pinc = aF + az; PLib.Deep.pl = aI + aH } aj = PLib.Deep.sghs + PLib.Deep.sghl; ak = PLib.Deep.shs + PLib.Deep.sh1; A.xinc = A.xinc + PLib.Deep.pinc; A.em = A.em + PLib.Deep.pe; if (PLib.Deep.xqncl >= 0.2) { ak = ak / A.sinio; aj = aj - A.cosio * ak; A.omgadf = A.omgadf + aj; A.xnode = A.xnode + ak; A.xll = A.xll + PLib.Deep.pl } else { aC = Math.sin(A.xnode); u = Math.cos(A.xnode); m = aB * aC; o = aB * u; x = ak * u + PLib.Deep.pinc * t * aC; z = -ak * aC + PLib.Deep.pinc * t * u; m = m + x; o = o + z; A.xnode = FMod2p(A.xnode); aZ = A.xll + A.omgadf + t * A.xnode; C = PLib.Deep.pl + aj - PLib.Deep.pinc * A.xnode * aB; aZ = aZ + C; a5 = A.xnode; A.xnode = Math.atan2(m, o); if (Math.abs(a5 - A.xnode) > PLib.pi) { if (A.xnode < a5) { A.xnode += PLib.twopi } else { A.xnode -= PLib.twopi } } A.xll = A.xll + PLib.Deep.pl; A.omgadf = aZ - A.xll - Math.cos(A.xinc) * A.xnode } return } }, SDP4: function (aw, au, R, aD) { var N = 0; var b = 0, f = 0, g = 0, h = 0, j = 0, k = 0, p = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, G = 0, I = 0, J = 0, K = 0, Q = 0, at = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, ab = 0, ac = 0, ad = 0, af = 0, ag = 0, ah = 0, aq = 0, ar = 0, ax = 0, ay = 0, az = 0, aA = 0, aB = 0, aC = 0, aE = 0, aF = 0, aG = 0, aJ = 0, aK = 0, aM = 0, aN = 0, aO = 0, aP = 0, aQ = 0, aR = 0, aS = 0, aL = 0, c = 0, d = 0, e = 0, o = 0, q = 0, t = 0, aH = 0, aI = 0, E = 0, U = 0, F = 0, H = 0, L = 0, M = 0, O = 0, S = 0, av = 0, T = 0, aa = 0, P = 0, ai = 0, ap = 0, aj = 0, ak = 0, al = 0, am = 0, an = 0, ao = 0, l = 0, m = 0, n = 0, B = 0, C = 0, D = 0; PLib.SDP4.deep_arg = PLib.SDP4.deep_arg || new PLib.deep_arg_t(); if (PLib.isFlagClear(PLib.SDP4_INITIALIZED_FLAG)) { PLib.SetFlag(PLib.SDP4_INITIALIZED_FLAG); c = Math.pow(PLib.xke / au.xno, PLib.tothrd); PLib.SDP4.deep_arg.cosio = Math.cos(au.xincl); PLib.SDP4.deep_arg.theta2 = PLib.SDP4.deep_arg.cosio * PLib.SDP4.deep_arg.cosio; PLib.SDP4.x3thm1 = 3 * PLib.SDP4.deep_arg.theta2 - 1; PLib.SDP4.deep_arg.eosq = au.eo * au.eo; PLib.SDP4.deep_arg.betao2 = 1 - PLib.SDP4.deep_arg.eosq; PLib.SDP4.deep_arg.betao = Math.sqrt(PLib.SDP4.deep_arg.betao2); E = 1.5 * PLib.ck2 * PLib.SDP4.x3thm1 / (c * c * PLib.SDP4.deep_arg.betao * PLib.SDP4.deep_arg.betao2); e = c * (1 - E * (0.5 * PLib.tothrd + E * (1 + 134 / 81 * E))); F = 1.5 * PLib.ck2 * PLib.SDP4.x3thm1 / (e * e * PLib.SDP4.deep_arg.betao * PLib.SDP4.deep_arg.betao2); PLib.SDP4.deep_arg.xnodp = au.xno / (1 + F); PLib.SDP4.deep_arg.aodp = e / (1 - F); aa = s; T = PLib.qoms2t; O = (PLib.SDP4.deep_arg.aodp * (1 - au.eo) - PLib.ae) * PLib.xkmper; if (O < 156) { if (O <= 98) { aa = 20 } else { aa = O - 78 } T = Math.pow((120 - aa) * PLib.ae / xkmper, 4); aa = aa / PLib.xkmper + PLib.ae } P = 1 / (PLib.SDP4.deep_arg.aodp * PLib.SDP4.deep_arg.aodp * PLib.SDP4.deep_arg.betao2 * PLib.SDP4.deep_arg.betao2); PLib.SDP4.deep_arg.sing = Math.sin(au.omegao); PLib.SDP4.deep_arg.cosg = Math.cos(au.omegao); av = 1 / (PLib.SDP4.deep_arg.aodp - aa); L = PLib.SDP4.deep_arg.aodp * au.eo * av; M = L * L; H = au.eo * L; S = Math.abs(1 - M); q = T * Math.pow(av, 4); t = q / Math.pow(S, 3.5); o = t * PLib.SDP4.deep_arg.xnodp * (PLib.SDP4.deep_arg.aodp * (1 + 1.5 * M + H * (4 + M)) + 0.75 * PLib.ck2 * av / S * PLib.SDP4.x3thm1 * (8 + 3 * M * (8 + M))); PLib.SDP4.c1 = au.bstar * o; PLib.SDP4.deep_arg.sinio = Math.sin(au.xincl); d = -xj3 / ck2 * Math.pow(ae, 3); PLib.SDP4.x1mth2 = 1 - PLib.SDP4.deep_arg.theta2; PLib.SDP4.c4 = 2 * PLib.SDP4.deep_arg.xnodp * t * PLib.SDP4.deep_arg.aodp * PLib.SDP4.deep_arg.betao2 * (L * (2 + 0.5 * M) + au.eo * (0.5 + 2 * M) - 2 * PLib.ck2 * av / (PLib.SDP4.deep_arg.aodp * S) * (-3 * PLib.SDP4.x3thm1 * (1 - 2 * H + M * (1.5 - 0.5 * H)) + 0.75 * PLib.SDP4.x1mth2 * (2 * M - H * (1 + M)) * Math.cos(2 * au.omegao))); at = PLib.SDP4.deep_arg.theta2 * PLib.SDP4.deep_arg.theta2; aj = 3 * PLib.ck2 * P * PLib.SDP4.deep_arg.xnodp; ak = aj * PLib.ck2 * P; al = 1.25 * PLib.ck4 * P * P * PLib.SDP4.deep_arg.xnodp; PLib.SDP4.deep_arg.xmdot = PLib.SDP4.deep_arg.xnodp + 0.5 * aj * PLib.SDP4.deep_arg.betao * PLib.SDP4.x3thm1 + 0.0625 * ak * PLib.SDP4.deep_arg.betao * (13 - 78 * PLib.SDP4.deep_arg.theta2 + 137 * at); aH = 1 - 5 * PLib.SDP4.deep_arg.theta2; PLib.SDP4.deep_arg.omgdot = -0.5 * aj * aH + 0.0625 * ak * (7 - 114 * PLib.SDP4.deep_arg.theta2 + 395 * at) + al * (3 - 36 * PLib.SDP4.deep_arg.theta2 + 49 * at); aI = -aj * PLib.SDP4.deep_arg.cosio; PLib.SDP4.deep_arg.xnodot = aI + (0.5 * ak * (4 - 19 * PLib.SDP4.deep_arg.theta2) + 2 * al * (3 - 7 * PLib.SDP4.deep_arg.theta2)) * PLib.SDP4.deep_arg.cosio; PLib.SDP4.xnodcf = 3.5 * PLib.SDP4.deep_arg.betao2 * aI * PLib.SDP4.c1; PLib.SDP4.t2cof = 1.5 * PLib.SDP4.c1; PLib.SDP4.xlcof = 0.125 * d * PLib.SDP4.deep_arg.sinio * (3 + 5 * PLib.SDP4.deep_arg.cosio) / (1 + PLib.SDP4.deep_arg.cosio); PLib.SDP4.aycof = 0.25 * d * PLib.SDP4.deep_arg.sinio; PLib.SDP4.x7thm1 = 7 * PLib.SDP4.deep_arg.theta2 - 1; Deep(dpinit, au, PLib.SDP4.deep_arg) } aO = au.xmo + PLib.SDP4.deep_arg.xmdot * aw; PLib.SDP4.deep_arg.omgadf = au.omegao + PLib.SDP4.deep_arg.omgdot * aw; aR = au.xnodeo + PLib.SDP4.deep_arg.xnodot * aw; ax = aw * aw; PLib.SDP4.deep_arg.xnode = aR + PLib.SDP4.xnodcf * ax; ap = 1 - PLib.SDP4.c1 * aw; aq = au.bstar * PLib.SDP4.c4 * aw; ar = PLib.SDP4.t2cof * ax; PLib.SDP4.deep_arg.xn = PLib.SDP4.deep_arg.xnodp; PLib.SDP4.deep_arg.xll = aO; PLib.SDP4.deep_arg.t = aw; Deep(dpsec, au, PLib.SDP4.deep_arg); aO = PLib.SDP4.deep_arg.xll; b = Math.pow(PLib.xke / PLib.SDP4.deep_arg.xn, PLib.tothrd) * ap * ap; PLib.SDP4.deep_arg.em = PLib.SDP4.deep_arg.em - aq; aN = aO + PLib.SDP4.deep_arg.xnodp * ar; PLib.SDP4.deep_arg.xll = aN; Deep(PLib.dpper, au, PLib.SDP4.deep_arg); aN = PLib.SDP4.deep_arg.xll; aK = aN + PLib.SDP4.deep_arg.omgadf + PLib.SDP4.deep_arg.xnode; j = Math.sqrt(1 - PLib.SDP4.deep_arg.em * PLib.SDP4.deep_arg.em); PLib.SDP4.deep_arg.xn = PLib.xke / Math.pow(b, 1.5); f = PLib.SDP4.deep_arg.em * Math.cos(PLib.SDP4.deep_arg.omgadf); ai = 1 / (b * j * j); aL = ai * PLib.SDP4.xlcof * f; h = ai * PLib.SDP4.aycof; aM = aK + aL; g = PLib.SDP4.deep_arg.em * Math.sin(PLib.SDP4.deep_arg.omgadf) + h; p = FMod2p(aM - PLib.SDP4.deep_arg.xnode); ak = p; N = 0; do { ac = Math.sin(ak); w = Math.cos(ak); al = f * ac; am = g * w; an = f * w; ao = g * ac; J = (p - am + al - ak) / (1 - an - ao) + ak; if (Math.abs(J - ak) <= e6a) { break } ak = J } while (N++ < 10); G = an + ao; K = al - am; I = f * f + g * g; ai = 1 - I; Q = b * ai; U = b * (1 - G); aj = 1 / U; V = PLib.xke * Math.sqrt(b) * K * aj; X = PLib.xke * Math.sqrt(Q) * aj; ak = b * aj; k = Math.sqrt(ai); al = 1 / (1 + k); z = ak * (w - f + g * K * al); ag = ak * (ac - g - f * K * al); ay = Math.atan2(ag, z); ab = 2 * ag * z; v = 2 * z * z - 1; ai = 1 / Q; aj = PLib.ck2 * ai; ak = aj * ai; Z = U * (1 - 1.5 * ak * k * PLib.SDP4.x3thm1) + 0.5 * aj * PLib.SDP4.x1mth2 * v; az = ay - 0.25 * ak * PLib.SDP4.x7thm1 * ab; aS = PLib.SDP4.deep_arg.xnode + 1.5 * ak * PLib.SDP4.deep_arg.cosio * ab; aJ = PLib.SDP4.deep_arg.xinc + 1.5 * ak * PLib.SDP4.deep_arg.cosio * PLib.SDP4.deep_arg.sinio * v; W = V - PLib.SDP4.deep_arg.xn * aj * PLib.SDP4.x1mth2 * ab; Y = X + PLib.SDP4.deep_arg.xn * aj * (PLib.SDP4.x1mth2 * v + 1.5 * PLib.SDP4.x3thm1); ah = Math.sin(az); A = Math.cos(az); ad = Math.sin(aJ); x = Math.cos(aJ); af = Math.sin(aS); y = Math.cos(aS); aP = -af * x; aQ = y * x; aA = aP * ah + y * A; aB = aQ * ah + af * A; aC = ad * ah; aE = aP * A - y * ah; aF = aQ * A - af * ah; aG = ad * A; R.x = Z * aA; R.y = Z * aB; R.z = Z * aC; aD.x = W * aA + Y * aE; aD.y = W * aB + Y * aF; aD.z = W * aC + Y * aG; PLib.phase = aM - PLib.SDP4.deep_arg.xnode - PLib.SDP4.deep_arg.omgadf + PLib.twopi; if (PLib.phase < 0) { PLib.phase += PLib.twopi } PLib.phase = PLib.FMod2p(PLib.phase) }, Calculate_User_PosVel: function (h, d, e, f) { var b = 0, g = 0, a = 0; d.theta = PLib.FMod2p(PLib.ThetaG_JD(h) + d.lon); b = 1 / Math.sqrt(1 + PLib.f * (PLib.f - 2) * PLib.Sqr(Math.sin(d.lat))); g = PLib.Sqr(1 - PLib.f) * b; a = (PLib.xkmper * b + d.alt) * Math.cos(d.lat); e.x = a * Math.cos(d.theta); e.y = a * Math.sin(d.theta); e.z = (PLib.xkmper * g + d.alt) * Math.sin(d.lat); f.x = -PLib.mfactor * e.y; f.y = PLib.mfactor * e.x; f.z = 0; PLib.Magnitude(e); PLib.Magnitude(f) }, Calculate_LatLonAlt: function (h, f, d) { var g = 0, b = 0, e = 0, a = 0; d.theta = Math.atan2(f.y, f.x); d.lon = PLib.FMod2p(d.theta - PLib.ThetaG_JD(h)); g = Math.sqrt(PLib.Sqr(f.x) + PLib.Sqr(f.y)); b = PLib.f * (2 - PLib.f); d.lat = Math.atan2(f.z, g); do { e = d.lat; a = 1 / Math.sqrt(1 - b * PLib.Sqr(Math.sin(e))); d.lat = Math.atan2(f.z + PLib.xkmper * a * b * Math.sin(e), g) } while (Math.abs(d.lat - e) >= 1e-10); d.alt = g / Math.cos(d.lat) - PLib.xkmper * a; if (d.lat > PLib.pio2) { d.lat -= PLib.twopi } }, Calculate_Obs: function (n, i, r, e, g) { var l = 0, b = 0, m = 0, c = 0, d = 0, a = 0, p = 0, o = 0, q = 0; var f = new PLib.vector_t(); var h = new PLib.vector_t(); var j = new PLib.vector_t(); var k = new PLib.vector_t(); PLib.Calculate_User_PosVel(n, e, f, h); j.x = i.x - f.x; j.y = i.y - f.y; j.z = i.z - f.z; rx = j.x; ry = j.y; rz = j.z; k.x = r.x - h.x; k.y = r.y - h.y; k.z = r.z - h.z; PLib.Magnitude(j); l = Math.sin(e.lat); b = Math.cos(e.lat); m = Math.sin(e.theta); c = Math.cos(e.theta); p = l * c * j.x + l * m * j.y - b * j.z; o = -m * j.x + c * j.y; q = b * c * j.x + b * m * j.y + l * j.z; a = Math.atan(-o / p); if (p > 0) { a = a + PLib.pi } if (a < 0) { a = a + PLib.twopi } d = Math.asin(q / j.w); g.x = a; g.y = d; g.z = j.w; g.w = PLib.Dot(j, k) / j.w; g.y = d; if (g.y >= 0) { PLib.SetFlag(PLib.VISIBLE_FLAG) } else { g.y = d; PLib.ClearFlag(PLib.VISIBLE_FLAG) } }, InternalUpdate: function (b) { var a; PLib.sat[b].designator = PLib.sat[b].line1.substring(9, 17); PLib.sat[b].satname = PLib.sat[b].name; PLib.sat[b].catnum = PLib.sat[b].line1.substring(2, 7); PLib.sat[b].year = PLib.sat[b].line1.substring(18, 20); PLib.sat[b].refepoch = PLib.sat[b].line1.substring(20, 32); a = 1e-05 * PLib.sat[b].line1.substring(44, 50); PLib.sat[b].nddot6 = a / Math.pow(10, PLib.sat[b].line1.charAt(51)); a = 1e-05 * PLib.sat[b].line1.substring(53, 59); PLib.sat[b].bstar = a / Math.pow(10, PLib.sat[b].line1.charAt(60)); PLib.sat[b].setnum = PLib.sat[b].line1.substring(64, 68); PLib.sat[b].incl = PLib.sat[b].line2.substring(8, 16); PLib.sat[b].raan = PLib.sat[b].line2.substring(17, 25); PLib.sat[b].eccn = 1e-07 * PLib.sat[b].line2.substring(26, 33); PLib.sat[b].argper = PLib.sat[b].line2.substring(34, 42); PLib.sat[b].meanan = PLib.sat[b].line2.substring(43, 51); PLib.sat[b].meanmo = PLib.sat[b].line2.substring(52, 63); PLib.sat[b].drag = PLib.sat[b].line1.substring(33, 43); PLib.sat[b].orbitnum = PLib.sat[b].line2.substring(63, 68) * 1; PLib.sat[b].azel = "" }, InitializeData: function () { for (var a = 0; a < PLib.tleData.length; a++) { PLib.sat[a] = new PLib.sat_t(); PLib.sat[a].name = PLib.tleData[a][0]; PLib.sat[a].line1 = PLib.tleData[a][1]; PLib.sat[a].line2 = PLib.tleData[a][2]; PLib.InternalUpdate(a) } }, DayNum: function (c, a, f) { var b = 0; var e = 0, g = 0; if (c < 3) { f--; c += 12 } if (f <= 50) { f += 100 } g = f; e = c; b = (Math.floor(365.25 * (g - 80)) - Math.floor(19 + g / 100) + Math.floor(4.75 + g / 400) - 16); b += a + 30 * c + Math.floor(0.6 * e - 0.3); return b }, CurrentDaynum: function () { var a = new Date(); return (a.getTime() - 315446400000) / 86400000 }, Daynum2Date: function (b) { var a = new Date(); a.setTime(b * 86400000 + 315446400000); var c = a + 1; return a }, PreCalc: function (b) { PLib.tle.sat_name = PLib.sat[b].name; PLib.tle.idesg = PLib.sat[b].designator; PLib.tle.catnr = PLib.sat[b].catnum; PLib.tle.epoch = (1000 * PLib.sat[b].year) + PLib.sat[b].refepoch * 1; PLib.tle.xndt2o = PLib.sat[b].drag; PLib.tle.xndd6o = PLib.sat[b].nddot6; PLib.tle.bstar = PLib.sat[b].bstar; PLib.tle.xincl = PLib.sat[b].incl; PLib.tle.xnodeo = PLib.sat[b].raan; PLib.tle.eo = PLib.sat[b].eccn; PLib.tle.omegao = PLib.sat[b].argper; PLib.tle.xmo = PLib.sat[b].meanan; PLib.tle.xno = PLib.sat[b].meanmo; PLib.tle.revnum = PLib.sat[b].orbitnum; if (PLib.sat[b].line1.substring(9, 11) == "  ") { var a = (new Date()).getFullYear() * 1 } else { var a = 2000 + PLib.sat[b].line1.substring(9, 11) * 1 } if (a > 2056) { a = a - 100 } yearsinspace = (new Date().getFullYear() - a) - 0.5; if (yearsinspace < 0) { yearsinspace = 0 } calcrev = 100000 * Math.floor(yearsinspace * 366.8 * PLib.tle.xno / 100000); if (PLib.sat[b].line1.substring(9, 14) != "98067" || PLib.sat[b].line1.substring(9, 15) == "98067A") { PLib.tle.revnum = PLib.tle.revnum + calcrev } PLib.ClearFlag(PLib.ALL_FLAGS); PLib.select_ephemeris(PLib.tle) }, Calc: function () { var g = new PLib.vector_t(); var f = new PLib.vector_t(); var b = new PLib.vector_t(); var a = new PLib.vector_t(); var e = new PLib.vector_t(); var d = new PLib.vector_t(); var c = new PLib.geodetic_t(); PLib.jul_utc = PLib.daynum + 2444238.5; PLib.jul_epoch = PLib.Julian_Date_of_Epoch(PLib.tle.epoch); PLib.tsince = (PLib.jul_utc - PLib.jul_epoch) * PLib.xmnpda; PLib.age = PLib.jul_utc - PLib.jul_epoch; if (PLib.isFlagSet(PLib.DEEP_SPACE_EPHEM_FLAG)) { PLib.ephem = "SDP4" } else { PLib.ephem = "SGP4" } if (PLib.isFlagSet(PLib.DEEP_SPACE_EPHEM_FLAG)) { PLib.SDP4(PLib.tsince, PLib.tle, b, f) } else { PLib.SGP4(PLib.tsince, PLib.tle, b, f) } PLib.Convert_Sat_State(b, f); PLib.Magnitude(f); PLib.sat_vel = f.w; PLib.Calculate_Obs(PLib.jul_utc, b, f, PLib.obs_geodetic, a); PLib.Calculate_LatLonAlt(PLib.jul_utc, b, c); PLib.Calculate_Solar_Position(PLib.jul_utc, e); PLib.Calculate_Obs(PLib.jul_utc, e, g, PLib.obs_geodetic, d); if (PLib.Sat_Eclipsed(b, e)) { PLib.SetFlag(PLib.SAT_ECLIPSED_FLAG) } else { PLib.ClearFlag(PLib.SAT_ECLIPSED_FLAG) } if (PLib.isFlagSet(PLib.SAT_ECLIPSED_FLAG)) { PLib.sat_sun_status = 0 } else { PLib.sat_sun_status = 1 } PLib.sat_azi = PLib.Degrees(a.x); PLib.sat_ele = PLib.Degrees(a.y); PLib.sat_range = a.z; PLib.sat_range_rate = a.w; PLib.sat_lat = PLib.Degrees(c.lat); PLib.sat_lon = PLib.Degrees(c.lon); if (PLib.sat_lon > 180) { PLib.sat_lon = PLib.sat_lon - 360 } PLib.sat_alt = c.alt; PLib.fk = 12756.33 * Math.acos(PLib.xkmper / (PLib.xkmper + PLib.sat_alt)); PLib.fm = PLib.fk / 1.609344; PLib.rv = Math.floor((PLib.tle.xno * PLib.xmnpda / PLib.twopi + PLib.age * PLib.tle.bstar * PLib.ae) * PLib.age + PLib.tle.xmo / PLib.twopi) + parseInt(PLib.tle.revnum); PLib.sun_azi = PLib.Degrees(d.x); PLib.sun_ele = PLib.Degrees(d.y); PLib.irk = PLib.sat_range; PLib.isplat = PLib.sat_lat; PLib.isplong = 360 - PLib.sat_lon; if (PLib.sat_range < 15000) { PLib.iaz = Math.round(PLib.sat_azi); PLib.iel = Math.round(PLib.sat_ele) } else { PLib.iaz = Math.round(PLib.sat_azi * 10) / 10; PLib.iel = Math.round(PLib.sat_ele * 10) / 10 } PLib.ma256 = Math.round(256 * (PLib.phase / PLib.twopi)); if (PLib.sat_sun_status) { if (PLib.sun_ele <= -12 && PLib.sat_ele >= 0) { PLib.findsun = "+" } else { PLib.findsun = "*" } } else { PLib.findsun = " " } }, AosHappens: function (d) { var b = 0, c = 0, a = 0; if (PLib.sat[d].meanmo == 0) { return 0 } else { b = PLib.sat[d].incl; if (b >= 90) { b = 180 - b } c = 331.25 * Math.exp(Math.log(1440 / PLib.sat[d].meanmo) * (2 / 3)); a = c * (1 + PLib.sat[d].eccn) - PLib.xkmper; if ((Math.acos(PLib.xkmper / (a + PLib.xkmper)) + (b * PLib.deg2rad)) > Math.abs(PLib.qth.stnlat * PLib.deg2rad)) { return 1 } else { return 0 } } }, Decayed: function (c, b) { var a = 0; if (b == 0) { b = PLib.CurrentDaynum() } a = PLib.DayNum(1, 0, PLib.sat[c].year) + PLib.sat[c].refepoch; if (a + ((16.666666 - PLib.sat[c].meanmo) / (10 * Math.abs(PLib.sat[c].drag))) < b) { return 1 } else { return 0 } }, Geostationary: function (a) { if (Math.abs(PLib.sat[a].meanmo - 1.0027) < 0.0002) { return 1 } else { return 0 } }, FindAOS: function () { PLib.aostime = 0; if (PLib.AosHappens(indx) && PLib.Geostationary(indx) == 0 && PLib.Decayed(indx, PLib.daynum) == 0) { PLib.Calc(); while (PLib.sat_ele < -1) { PLib.daynum -= 0.00035 * (PLib.sat_ele * (((PLib.sat_alt / 8400) + 0.46)) - 2); PLib.Calc() } while (PLib.aostime == 0) { if (Math.abs(PLib.sat_ele) < 0.03) { PLib.aostime = PLib.daynum } else { PLib.daynum -= PLib.sat_ele * Math.sqrt(PLib.sat_alt) / 530000; PLib.Calc() } } } return PLib.aostime }, FindLOS: function () { PLib.lostime = 0; if (PLib.Geostationary(indx) == 0 && PLib.AosHappens(indx) == 1 && PLib.Decayed(indx, PLib.daynum) == 0) { PLib.Calc(); do { PLib.daynum += PLib.sat_ele * Math.sqrt(PLib.sat_alt) / 502500; PLib.Calc(); if (Math.abs(PLib.sat_ele) < 0.03) { PLib.lostime = PLib.daynum } } while (PLib.lostime == 0) } return PLib.lostime }, QuickFind: function (c) { var b = new Object(); for (var d = 0; d < 160; d++) { if ((PLib.sat[d].name == c) || (c == PLib.sat[d].catnum)) { PLib.daynum = PLib.CurrentDaynum(); PLib.PreCalc(d); PLib.Calc(); if (PLib.Decayed(d, PLib.daynum) == 0) { b.dateTime = PLib.Daynum2Date(PLib.daynum); b.elevation = PLib.iel; b.azimuth = PLib.iaz; b.orbitalPhase = PLib.ma256; b.latitude = PLib.isplat; var a = 360 - PLib.isplong; if (a > 180) { a = -PLib.isplong } b.longitude = a; b.slantRange = PLib.irk; b.orbitNumber = PLib.rv; b.visibility = PLib.findsun; b.detalle = "Tracking: " + PLib.sat[d].name + "\nAzimuth : " + PLib.iaz + "�\nElevation: " + PLib.iel + "�" } break } } return b }, formatDateOnly: function (a) { var b = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]; return b[a.getMonth()] + "-" + a.getDate() }, formatTimeOnly: function (b) { var c = b.getHours(); var d = b.getMinutes(); var a = c < 12 ? "AM" : "PM"; c = c < 10 ? "0" + c : c; d = d < 10 ? "0" + d : d; return c + ":" + d }, formatTimeWithSeconds: function (b) { var c = b.getHours(); var d = b.getMinutes(); var e = b.getSeconds(); var a = c < 12 ? "AM" : "PM"; c = c < 10 ? "0" + c : c; d = d < 10 ? "0" + d : d; e = e < 10 ? "0" + e : e; return c + ":" + d + ":" + e }, extractDate: function (b) { var a = new Date(); a.setTime(b.valueOf()); a.setHours(0); a.setMinutes(0); a.setSeconds(0); a.setMilliseconds(0); return a }, addDay: function (b) { var a = new Date(b.getTime() + timespan); return a }, getTodaysPasses: function () { var k = new Array(); var a = 0; var m = 0, n = 0, o = 0, e = 0; var l = 0, g = 0; for (o = 0; o < PLib.sat.length; o++) { indx = o; g = (3651 + PLib.CurrentDaynum()) * 86400; if (l == 0) { l = g } if ((l >= g - 31557600) && (l <= g + 31557600)) { PLib.daynum = (l / 86400) - 3651; PLib.PreCalc(indx); PLib.Calc(); var c = new Date(); var h = 1; if (PLib.AosHappens(indx) && PLib.Geostationary(indx) == 0 && PLib.Decayed(indx, PLib.daynum) == 0) { PLib.daynum = PLib.FindAOS(); while (PLib.Daynum2Date(PLib.daynum) < PLib.addDay(c)) { var j = new Object(); j.number = o + 1; j.name = PLib.sat[o].name; j.passNo = h++; j.dateTimeStart = PLib.Daynum2Date(PLib.daynum); j.peakElevation = PLib.iel; j.riseAzimuth = j.peakAzimuth = PLib.iaz; j.orbitalPhase = PLib.ma256; j.latitude = PLib.isplat; var f = 360 - PLib.isplong; if (f > 180) { f = -PLib.isplong } j.longitude = f; j.riseRange = j.peakRange = PLib.irk; j.orbitNumber = PLib.rv; var i = 0; var b = 0; while (PLib.iel >= 0) { if (PLib.iel > j.peakElevation) { j.peakElevation = PLib.iel; j.peakAzimuth = PLib.iaz; j.peakRange = PLib.irk } if (PLib.findsun == "+") { i++ } else { if (PLib.findsun == "*") { b++ } } e = PLib.iel; PLib.daynum += Math.cos((PLib.sat_ele - 1) * PLib.deg2rad) * Math.sqrt(PLib.sat_alt) / 25000; PLib.Calc() } if (e != 0) { PLib.daynum = PLib.FindLOS(); PLib.Calc() } j.dateTimeEnd = PLib.Daynum2Date(PLib.daynum); j.decayAzimuth = PLib.iaz; j.decayRange = PLib.irk; if ((i > 3) || (i > 2 && b > 2)) { j.visibility = "+" } else { if (b > 2) { j.visibility = "*" } } k[a++] = j; PLib.daynum += (1 / 24 / 6); PLib.daynum = PLib.FindAOS() } } } } return k }, configureGroundStation: function (a, b) { PLib.qth.stnlat = a; if (b < 0) { PLib.qth.stnlong = -b } else { PLib.qth.stnlong = 360 - b } PLib.obs_geodetic.lat = PLib.qth.stnlat * PLib.deg2rad; PLib.obs_geodetic.lon = -PLib.qth.stnlong * PLib.deg2rad; PLib.obs_geodetic.alt = PLib.qth.stnalt / 1000; PLib.obs_geodetic.theta = 0 } }; PLib.obs_geodetic = new PLib.geodetic_t(); PLib.tle = new PLib.tle_t();